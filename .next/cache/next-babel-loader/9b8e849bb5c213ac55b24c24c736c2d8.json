{"ast":null,"code":"import { useEffect } from 'react';\n\n// https://usehooks.com/useOnClickOutside/\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  },\n  // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n};\nexport default useOnClickOutside;","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/Users/os333k/Desktop/innovation-2022/e2eRunner/components/useOnClickOutside.ts"],"sourcesContent":["import { MutableRefObject, useEffect } from 'react';\n\n// https://usehooks.com/useOnClickOutside/\n\nconst useOnClickOutside = (ref:any, handler:any ) => {\n  useEffect(\n    () => {\n      const listener = (event: { target: any; }):any => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler],\n  );\n};\n\nexport default useOnClickOutside;"],"mappings":"AAAA,SAA2BA,SAAS,QAAQ,OAAO;;AAEnD;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,GAAO,EAAEC,OAAW,KAAM;EACnDH,SAAS,CACP,MAAM;IACJ,MAAMI,QAAQ,GAAIC,KAAuB,IAAS;MAChD;MACA,IAAI,CAACH,GAAG,CAACI,OAAO,IAAIJ,GAAG,CAACI,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;QACtD;MACF;MAEAL,OAAO,CAACE,KAAK,CAAC;IAChB,CAAC;IAEDI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,QAAQ,CAAC;IAChDK,QAAQ,CAACC,gBAAgB,CAAC,YAAY,EAAEN,QAAQ,CAAC;IAEjD,OAAO,MAAM;MACXK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,QAAQ,CAAC;MACnDK,QAAQ,CAACE,mBAAmB,CAAC,YAAY,EAAEP,QAAQ,CAAC;IACtD,CAAC;EACH,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA,CAACF,GAAG,EAAEC,OAAO,CAAC,CACf;AACH,CAAC;AAED,eAAeF,iBAAiB"},"metadata":{},"sourceType":"module"}
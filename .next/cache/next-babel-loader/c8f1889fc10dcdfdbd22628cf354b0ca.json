{"ast":null,"code":"\"use strict\";\n\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\nvar _Object$assign = require(\"@babel/runtime-corejs2/core-js/object/assign\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription\n  }) {\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      }\n      // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (e.state.options && e.state.options.fromExternal) {\n        return;\n      }\n      // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n      const {\n        url,\n        as,\n        options\n      } = e.state;\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n      this.replace(url, as, options);\n    };\n    // represents the current component key\n    this.route = toRoute(pathname);\n    // set up the component cache (by route keys)\n    this.components = {};\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err\n      };\n    }\n    this.components['/_app'] = {\n      Component: App\n    };\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    // @ts-ignore backwards compatibility\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query;\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n    // @ts-ignore this is temporarily global (attached to window)\n    is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.nextExport ? pathname : as;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp;\n    if (false) {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n      window.addEventListener('unload', () => {\n        // Workaround for popstate firing on initial page load when\n        // navigating back from an external site\n        if (history.state) {\n          const {\n            url,\n            as,\n            options\n          } = history.state;\n          this.changeState('replaceState', url, as, _Object$assign({}, options, {\n            fromExternal: true\n          }));\n        }\n      });\n    }\n  }\n  // @deprecated backwards compatibility even though it's a private method.\n  static _rewriteUrlForNextExport(url) {\n    return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n  }\n  update(route, mod) {\n    const Component = mod.default || mod;\n    const data = this.components[route];\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n    const newData = _Object$assign({}, data, {\n      Component\n    });\n    this.components[route] = newData;\n    // pages/_app.js updated\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n  reload() {\n    window.location.reload();\n  }\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back();\n  }\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n  change(method, _url, _as, options) {\n    return new _Promise((resolve, reject) => {\n      // marking route changes as a navigation start entry\n      if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\n        performance.mark('routeChange');\n      }\n      // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n      const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n      let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n      // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n        }\n      }\n      this.abortComponentLoad(as);\n      // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as;\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, as);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return resolve(true);\n      }\n      const {\n        pathname,\n        query,\n        protocol\n      } = url_1.parse(url, true);\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n        return resolve(false);\n      }\n      // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      }\n      // @ts-ignore pathname is always a string\n      const route = toRoute(pathname);\n      const {\n        shallow = false\n      } = options;\n      if (is_dynamic_1.isDynamicRoute(route)) {\n        const {\n          pathname: asPathname\n        } = url_1.parse(as);\n        const rr = route_regex_1.getRouteRegex(route);\n        const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\n        if (!routeMatch) {\n          console.error('The provided `as` value is incompatible with the `href` value. This is invalid. https://err.sh/zeit/next.js/incompatible-href-as');\n          return resolve(false);\n        }\n        // Merge params into `query`, overwriting any specified in search\n        _Object$assign(query, routeMatch);\n      }\n      Router.events.emit('routeChangeStart', as);\n      // If shallow is true and the route exists in the router cache we reuse the previous result\n      // @ts-ignore pathname is always a string\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n        const hash = window.location.hash.substring(1);\n        if (process.env.NODE_ENV !== 'production') {\n          const appComp = this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        }\n        // @ts-ignore pathname is always defined\n        this.set(route, pathname, query, as, _Object$assign({}, routeInfo, {\n          hash\n        }));\n        if (error) {\n          Router.events.emit('routeChangeError', error, as);\n          throw error;\n        }\n        Router.events.emit('routeChangeComplete', as);\n        return resolve(true);\n      }, reject);\n    });\n  }\n  changeState(method, url, as, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n      // @ts-ignore method should always exist on history\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      // @ts-ignore method should always exist on history\n      window.history[method]({\n        url,\n        as,\n        options\n      }, null, as);\n    }\n  }\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route];\n    // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return _Promise.resolve(cachedRouteInfo);\n    }\n    return new _Promise((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n      this.fetchComponent(route).then(Component => resolve({\n        Component\n      }), reject);\n    }).then(routeInfo => {\n      const {\n        Component\n      } = routeInfo;\n      if (process.env.NODE_ENV !== 'production') {\n        const {\n          isValidElementType\n        } = require('react-is');\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n      return new _Promise((resolve, reject) => {\n        // we provide AppTree later so this needs to be `any`\n        this.getInitialProps(Component, {\n          pathname,\n          query,\n          asPath: as\n        }).then(props => {\n          routeInfo.props = props;\n          this.components[route] = routeInfo;\n          resolve(routeInfo);\n        }, reject);\n      });\n    }).catch(err => {\n      return new _Promise(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR') {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as;\n          // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n          err.cancelled = true;\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n        resolve(this.fetchComponent('/_error').then(Component => {\n          const routeInfo = {\n            Component,\n            err\n          };\n          return new _Promise(resolve => {\n            this.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            }).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }));\n      });\n    });\n  }\n  set(route, pathname, query, as, data) {\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#');\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    }\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    }\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash;\n  }\n  scrollToHash(as) {\n    const [, hash] = as.split('#');\n    // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    }\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash);\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0];\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n   * Prefetch `page` code, you may wait for the data during `page` rendering.\n   * This feature only works in production!\n   * @param url of prefetched `page`\n   */\n  prefetch(url) {\n    return new _Promise((resolve, reject) => {\n      const {\n        pathname,\n        protocol\n      } = url_1.parse(url);\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n        return;\n      }\n      // Prefetch is not supported in development mode because it would trigger on-demand-entries\n      if (process.env.NODE_ENV !== 'production') return;\n      // @ts-ignore pathname is always defined\n      const route = toRoute(pathname);\n      this.pageLoader.prefetch(route).then(resolve, reject);\n    });\n  }\n  async fetchComponent(route) {\n    let cancelled = false;\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n    const Component = await this.pageLoader.loadPage(route);\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n    return Component;\n  }\n  async getInitialProps(Component, ctx) {\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n    this.clc = cancel;\n    const {\n      Component: App\n    } = this.components['/_app'];\n    let props;\n    if (\n    // @ts-ignore workaround for dead-code elimination\n    (self.__HAS_SPR || process.env.NODE_ENV !== 'production') && Component.__NEXT_SPR) {\n      let status;\n      const {\n        pathname\n      } = url_1.parse(ctx.asPath || ctx.pathname);\n      props = await fetch(`/_next/data${pathname}.json`).then(res => {\n        if (!res.ok) {\n          status = res.status;\n          throw new Error('failed to load prerender data');\n        }\n        return res.json();\n      }).catch(err => {\n        console.error(`Failed to load data`, status, err);\n        window.location.href = pathname;\n        return new _Promise(() => {});\n      });\n    } else {\n      const AppTree = this._wrapApp(App);\n      ctx.AppTree = AppTree;\n      props = await utils_1.loadGetInitialProps(App, {\n        AppTree,\n        Component,\n        router: this,\n        ctx\n      });\n    }\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n    if (cancelled) {\n      const err = new Error('Loading initial props cancelled');\n      err.cancelled = true;\n      throw err;\n    }\n    return props;\n  }\n  abortComponentLoad(as) {\n    if (this.clc) {\n      const e = new Error('Route Cancelled');\n      e.cancelled = true;\n      Router.events.emit('routeChangeError', e, as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n  notify(data) {\n    this.sub(data, this.components['/_app'].Component);\n  }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;","map":{"version":3,"names":["__importDefault","mod","__esModule","exports","value","url_1","require","mitt_1","utils_1","rewrite_url_for_export_1","route_matcher_1","route_regex_1","is_dynamic_1","toRoute","path","replace","Router","constructor","pathname","query","as","initialProps","pageLoader","App","wrapApp","Component","err","subscription","onPopState","e","state","changeState","formatWithValidation","getURL","options","fromExternal","_bps","url","process","env","NODE_ENV","console","warn","route","components","props","events","asPath","isDynamicRoute","__NEXT_DATA__","nextExport","sub","clc","_wrapApp","window","addEventListener","history","_rewriteUrlForNextExport","rewriteUrlForNextExport","update","default","data","Error","newData","notify","reload","location","back","push","change","method","_url","_as","resolve","reject","SUPPORTS_PERFORMANCE_USER_TIMING","performance","mark","__NEXT_EXPORT_TRAILING_SLASH","abortComponentLoad","_h","onlyAHashChange","emit","scrollToHash","protocol","parse","urlIsNew","shallow","asPathname","rr","getRouteRegex","routeMatch","getRouteMatcher","error","getRouteInfo","then","routeInfo","cancelled","hash","substring","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","fetchComponent","isValidElementType","catch","code","href","gipErr","beforePopState","cb","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","cancel","loadPage","ctx","self","__HAS_SPR","__NEXT_SPR","status","fetch","res","ok","json","AppTree","loadGetInitialProps","router"],"sources":["/Users/os333k/Desktop/innovation-2022/e2eRunner/node_modules/next/dist/next-server/lib/router/router.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, }) {\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state.options && e.state.options.fromExternal) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        // @ts-ignore backwards compatibility\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        this.asPath =\n            // @ts-ignore this is temporarily global (attached to window)\n            is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.nextExport ? pathname : as;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n            window.addEventListener('unload', () => {\n                // Workaround for popstate firing on initial page load when\n                // navigating back from an external site\n                if (history.state) {\n                    const { url, as, options } = history.state;\n                    this.changeState('replaceState', url, as, Object.assign({}, options, { fromExternal: true }));\n                }\n            });\n        }\n    }\n    // @deprecated backwards compatibility even though it's a private method.\n    static _rewriteUrlForNextExport(url) {\n        return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n    }\n    update(route, mod) {\n        const Component = mod.default || mod;\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign({}, data, { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            // marking route changes as a navigation start entry\n            if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\n                performance.mark('routeChange');\n            }\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            if (!options._h && this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query, protocol } = url_1.parse(url, true);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return resolve(false);\n            }\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            // @ts-ignore pathname is always a string\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            if (is_dynamic_1.isDynamicRoute(route)) {\n                const { pathname: asPathname } = url_1.parse(as);\n                const rr = route_regex_1.getRouteRegex(route);\n                const routeMatch = route_matcher_1.getRouteMatcher(rr)(asPathname);\n                if (!routeMatch) {\n                    console.error('The provided `as` value is incompatible with the `href` value. This is invalid. https://err.sh/zeit/next.js/incompatible-href-as');\n                    return resolve(false);\n                }\n                // Merge params into `query`, overwriting any specified in search\n                Object.assign(query, routeMatch);\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            // @ts-ignore pathname is always a string\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                const hash = window.location.hash.substring(1);\n                if (process.env.NODE_ENV !== 'production') {\n                    const appComp = this.components['/_app'].Component;\n                    window.next.isPrerendered =\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\n                            !routeInfo.Component.getInitialProps;\n                }\n                // @ts-ignore pathname is always defined\n                this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            // @ts-ignore method should always exist on history\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            // @ts-ignore method should always exist on history\n            window.history[method]({ url, as, options }, null, as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(Component => resolve({ Component }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return new Promise((resolve, reject) => {\n                // we provide AppTree later so this needs to be `any`\n                this.getInitialProps(Component, {\n                    pathname,\n                    query,\n                    asPath: as,\n                }).then(props => {\n                    routeInfo.props = props;\n                    this.components[route] = routeInfo;\n                    resolve(routeInfo);\n                }, reject);\n            });\n        })\n            .catch(err => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR') {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error').then(Component => {\n                    const routeInfo = { Component, err };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, {\n                            err,\n                            pathname,\n                            query,\n                        }).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                }));\n            });\n        });\n    }\n    set(route, pathname, query, as, data) {\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\n     * This feature only works in production!\n     * @param url of prefetched `page`\n     */\n    prefetch(url) {\n        return new Promise((resolve, reject) => {\n            const { pathname, protocol } = url_1.parse(url);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return;\n            }\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production')\n                return;\n            // @ts-ignore pathname is always defined\n            const route = toRoute(pathname);\n            this.pageLoader.prefetch(route).then(resolve, reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.clc = () => {\n            cancelled = true;\n        });\n        const Component = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        return Component;\n    }\n    async getInitialProps(Component, ctx) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.clc = cancel;\n        const { Component: App } = this.components['/_app'];\n        let props;\n        if (\n        // @ts-ignore workaround for dead-code elimination\n        (self.__HAS_SPR || process.env.NODE_ENV !== 'production') &&\n            Component.__NEXT_SPR) {\n            let status;\n            const { pathname } = url_1.parse(ctx.asPath || ctx.pathname);\n            props = await fetch(`/_next/data${pathname}.json`)\n                .then(res => {\n                if (!res.ok) {\n                    status = res.status;\n                    throw new Error('failed to load prerender data');\n                }\n                return res.json();\n            })\n                .catch((err) => {\n                console.error(`Failed to load data`, status, err);\n                window.location.href = pathname;\n                return new Promise(() => { });\n            });\n        }\n        else {\n            const AppTree = this._wrapApp(App);\n            ctx.AppTree = AppTree;\n            props = await utils_1.loadGetInitialProps(App, {\n                AppTree,\n                Component,\n                router: this,\n                ctx,\n            });\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        if (cancelled) {\n            const err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n        }\n        return props;\n    }\n    abortComponentLoad(as) {\n        if (this.clc) {\n            const e = new Error('Route Cancelled');\n            e.cancelled = true;\n            Router.events.emit('routeChangeError', e, as);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data) {\n        this.sub(data, this.components['/_app'].Component);\n    }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}